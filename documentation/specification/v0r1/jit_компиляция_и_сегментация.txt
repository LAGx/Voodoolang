


Для пользователя использование языка похоже на интерпритируемый.
На самом деле перед выполнением кода он валидируется и компилируется
в рантайме в специальные внутренние структуры (машинный код и
мета-информацию для работы с кусками машинного кода)
 после "компиляции" код выполняется.
 Весь код условно делится на "сегменты".

 сегмент это одно или несколько "statement"(команда или заявление), т.е. выражкние, которое ничего не возвращает.
 Эта команда должна быть завершенной.

 "
 struct Person{
  Int age;
 "
  - не сегмент

  "
  struct Person{
  Int age;
  String name;
 };
"
 - сегмент

 "
 namespace core_engine{
  Int a;
"
- не сегмент

 "
 namespace core_engine{
  Int a;

  void printHello() {
    print("hello") ;
   }

   printHello() ;
 } ;
"
- сегмент


компилироватся и исполнятся код может только посегментно.
Код условно сегментируется только при вводе в компилятор,
после компиляции он сливается в общую среду и далее происходит
выполнение выполняемых выражений.

При ошибке компиляции сегмент игнорируется. Даже команды, типы и функции, которые могут быть скомпилированы не сливаются в общую среду.
